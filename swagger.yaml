openapi: 3.0.1
info:
  title: Api Documentation
  description: Api Documentation
  termsOfService: urn:tos
  contact: {}
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  version: "1.0"
servers:
- url: //localhost:8081/
tags:
- name: auth-controller
  description: Auth Controller
- name: category-controller
  description: Category Controller
- name: order-controller
  description: Order Controller
- name: printer-controller
  description: Printer Controller
paths:
  /api/auth/reset:
    post:
      tags:
      - auth-controller
      summary: Reset existing user password.
      operationId: resetPasswordUsingPOST
      requestBody:
        description: resetPasswordRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
        required: true
      responses:
        200:
          description: user password has been update correctly
          content:
            '*/*':
              schema:
                type: string
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: the entered password is incorrect
          content: {}
        404:
          description: user not valid or not exist
          content: {}
      x-codegen-request-body-name: resetPasswordRequest
  /api/auth/signin:
    post:
      tags:
      - auth-controller
      summary: Login with an existing and valid User.
      operationId: authenticateUserUsingPOST
      requestBody:
        description: loginRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        200:
          description: user found and load in security session
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JwtResponse'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: the entered password is incorrect
          content: {}
        404:
          description: user not valid or not exist
          content: {}
      x-codegen-request-body-name: loginRequest
  /api/auth/signup:
    post:
      tags:
      - auth-controller
      summary: Register new user (need Admin privilege).
      operationId: registerUserUsingPOST
      requestBody:
        description: signUpRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
        required: true
      responses:
        200:
          description: new user has been created
          content:
            '*/*':
              schema:
                type: string
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
        409:
          description: the entered username is already taken
          content: {}
      security:
      - ADMIN: []
      x-codegen-request-body-name: signUpRequest
  /api/category:
    get:
      tags:
      - category-controller
      summary: get categories
      operationId: getCategoriesUsingGET
      responses:
        200:
          description: categories found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    put:
      tags:
      - category-controller
      summary: update category
      operationId: updateUsingPUT
      requestBody:
        description: categoryDTO
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDTO'
        required: true
      responses:
        200:
          description: category updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDTO'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      security:
      - ADMIN: []
      x-codegen-request-body-name: categoryDTO
    post:
      tags:
      - category-controller
      summary: create category
      operationId: createUsingPOST
      requestBody:
        description: categoryDTO
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDTO'
        required: true
      responses:
        200:
          description: category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDTO'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      security:
      - ADMIN: []
      x-codegen-request-body-name: categoryDTO
  /api/category/{id}:
    get:
      tags:
      - category-controller
      summary: get category
      operationId: findByIdUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: category found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDTO'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    delete:
      tags:
      - category-controller
      summary: delete category
      operationId: deleteUsingDELETE
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: category deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDTO'
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      security:
      - ADMIN: []
  /api/category/{id}/menuitem:
    get:
      tags:
      - category-controller
      summary: Get all menu item associated with the selected category
      operationId: findAllMenuItemByCategoryIdUsingGET
      parameters:
      - name: category ID
        in: path
        description: The selected category
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: menu item list returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-ModelName{namespace=''org.springframework.http'',
                  name=''ResponseEntity''}'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    post:
      tags:
      - category-controller
      summary: create menu item into selected category
      operationId: createMenuItemUsingPOST
      parameters:
      - name: category ID
        in: path
        description: The selected category
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: menuItemDTO
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuItemDTO'
        required: true
      responses:
        200:
          description: list of menu item created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-ModelName{namespace=''org.springframework.http'',
                  name=''ResponseEntity''}'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      security:
      - ADMIN: []
      x-codegen-request-body-name: menuItemDTO
  /api/category/{id}/menuitem/{itemId}:
    get:
      tags:
      - category-controller
      summary: Get one menu item by id associated with the selected category
      operationId: getMenuItemByCategoryIdUsingGET
      parameters:
      - name: category ID
        in: path
        description: The selected category
        required: true
        schema:
          type: integer
          format: int64
      - name: menu item ID
        in: path
        description: The selected menu item to retrieve
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: menu item list returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-ModelName{namespace=''org.springframework.http'',
                  name=''ResponseEntity''}'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    put:
      tags:
      - category-controller
      summary: update menu item with new properties by category id and item id
      operationId: updateMenuItemUsingPUT
      parameters:
      - name: category ID
        in: path
        description: The selected category
        required: true
        schema:
          type: integer
          format: int64
      - name: menu item ID
        in: path
        description: The selected menu item to retrieve
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: menuItemDTO
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuItemDTO'
        required: true
      responses:
        200:
          description: menu item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-ModelName{namespace=''org.springframework.http'',
                  name=''ResponseEntity''}'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      security:
      - ADMIN: []
      x-codegen-request-body-name: menuItemDTO
    delete:
      tags:
      - category-controller
      summary: remove one menu item from category
      operationId: deleteMenuItemByIdAndCategoryIdUsingDELETE
      parameters:
      - name: category ID
        in: path
        description: The selected category
        required: true
        schema:
          type: integer
          format: int64
      - name: menu item ID
        in: path
        description: The selected menu item to retrieve
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: menu item deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-ModelName{namespace=''org.springframework.http'',
                  name=''ResponseEntity''}'
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      security:
      - ADMIN: []
  /api/order:
    get:
      tags:
      - order-controller
      summary: findAll
      operationId: findAllUsingGET
      parameters:
      - name: page
        in: query
        description: page
        required: true
        schema:
          type: string
          default: "0"
      - name: size
        in: query
        description: size
        required: true
        schema:
          type: string
          default: "10"
      - name: status
        in: query
        description: status
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AbstractPagination«Serializable»'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    put:
      tags:
      - order-controller
      summary: update
      operationId: updateUsingPUT_1
      requestBody:
        description: dto
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DetailedOrderDTO'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedOrderDTO'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: dto
    post:
      tags:
      - order-controller
      summary: create
      operationId: createUsingPOST_1
      requestBody:
        description: dto
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DetailedOrderDTO'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedOrderDTO'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: dto
  /api/order/search:
    get:
      tags:
      - order-controller
      summary: search
      operationId: searchUsingGET
      parameters:
      - name: query
        in: query
        description: query
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AbstractPagination«Serializable»'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
  /api/order/{id}:
    get:
      tags:
      - order-controller
      summary: getById
      operationId: getByIdUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedOrderDTO'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    delete:
      tags:
      - order-controller
      summary: delete
      operationId: deleteUsingDELETE_1
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
    patch:
      tags:
      - order-controller
      summary: patchStatus
      operationId: patchStatusUsingPATCH
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      - name: status
        in: query
        description: status
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
  /api/order/{id}/print:
    post:
      tags:
      - order-controller
      summary: print
      operationId: printUsingPOST
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
  /api/printer/cfg:
    get:
      tags:
      - printer-controller
      summary: get printer configurations
      operationId: getPrinterCfgsUsingGET
      responses:
        200:
          description: printer configurations found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    post:
      tags:
      - printer-controller
      summary: create a printer configuration
      operationId: createPrinterCfgUsingPOST
      requestBody:
        description: printerCfgDTO
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrinterCfgDTO'
        required: true
      responses:
        200:
          description: printer configuration created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrinterCfgDTO'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: printerCfgDTO
  /api/printer/cfg/{id}:
    get:
      tags:
      - printer-controller
      summary: retrieve a printer configuration
      operationId: retrievePrinterCfgUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: printer configuration retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrinterCfgDTO'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    put:
      tags:
      - printer-controller
      summary: update a printer configuration
      operationId: updatePrinterCfgUsingPUT
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: printerCfgDTO
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrinterCfgDTO'
        required: true
      responses:
        200:
          description: printer configuration updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrinterCfgDTO'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: printerCfgDTO
    delete:
      tags:
      - printer-controller
      summary: delete a printer configuration
      operationId: deletePrinterCfgUsingDELETE
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: printer configuration deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrinterCfgDTO'
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
  /api/printer/list:
    get:
      tags:
      - printer-controller
      summary: get printers
      operationId: getPrintersUsingGET
      responses:
        200:
          description: printers found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
  /api/printer/print/{printerName}:
    get:
      tags:
      - printer-controller
      summary: print to a real printer
      operationId: printUsingGET
      parameters:
      - name: allParams
        in: query
        description: allParams
        required: true
        schema: {}
      - name: printerName
        in: path
        description: printerName
        required: true
        schema:
          type: string
      responses:
        200:
          description: print done
          content:
            application/json:
              schema:
                type: boolean
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
  /api/printer/printPdf/{printerName}:
    get:
      tags:
      - printer-controller
      summary: print pdf to a real printer
      operationId: printPdfUsingGET
      parameters:
      - name: allParams
        in: query
        description: allParams
        required: true
        schema: {}
      - name: printerName
        in: path
        description: printerName
        required: true
        schema:
          type: string
      responses:
        200:
          description: print pdf done
          content:
            application/json:
              schema:
                type: boolean
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
  /api/printer/printToFile:
    get:
      tags:
      - printer-controller
      summary: print to a file
      operationId: printToFileUsingGET
      parameters:
      - name: allParams
        in: query
        description: allParams
        required: true
        schema: {}
      responses:
        200:
          description: print done
          content:
            application/json:
              schema:
                type: boolean
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
  /api/printer/reportTemplate:
    get:
      tags:
      - printer-controller
      summary: get all report templates
      operationId: getReportTemplatesUsingGET
      responses:
        200:
          description: report templates found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
components:
  schemas:
    AbstractPagination«Serializable»:
      title: AbstractPagination«Serializable»
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Serializable'
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
    CategoryDTO:
      title: CategoryDTO
      type: object
      properties:
        color:
          type: string
        creationTimestamp:
          type: string
          format: date-time
        creationUser:
          type: string
        description:
          type: string
        id:
          type: integer
          format: int64
        menuItemList:
          type: array
          items:
            $ref: '#/components/schemas/MenuItemDTO'
        name:
          type: string
        printerCfgList:
          type: array
          items:
            $ref: '#/components/schemas/PrinterCfgDTO'
        processingZone:
          type: string
        updateTimestamp:
          type: string
          format: date-time
        updateUser:
          type: string
        version:
          type: integer
          format: int64
    DetailedOrderDTO:
      title: DetailedOrderDTO
      type: object
      properties:
        client:
          type: string
        content:
          type: array
          items:
            $ref: '#/components/schemas/OrderContent'
        creationTimestamp:
          type: string
          format: date-time
        creationUser:
          type: string
        discount:
          type: integer
          format: int32
        id:
          type: integer
          format: int64
        note:
          type: string
        placeSettingNumber:
          type: integer
          format: int32
        printOrder:
          type: boolean
        tableNumber:
          type: integer
          format: int32
        takeAway:
          type: boolean
        total:
          type: number
          format: double
        updateTimestamp:
          type: string
          format: date-time
        updateUser:
          type: string
        version:
          type: integer
          format: int64
    FeastErrorResponse:
      title: FeastErrorResponse
      type: object
      properties:
        cause:
          type: string
        message:
          type: string
        status:
          type: integer
          format: int32
        timestamp:
          type: string
          example: yyyy-MM-dd hh:mm:ss
    JwtResponse:
      title: JwtResponse
      type: object
      properties:
        email:
          type: string
        id:
          type: integer
          format: int64
        roles:
          type: array
          items:
            type: string
        token:
          type: string
        type:
          type: string
        username:
          type: string
    LoginRequest:
      title: LoginRequest
      required:
      - password
      - username
      type: object
      properties:
        password:
          type: string
        username:
          type: string
    MenuItemDTO:
      title: MenuItemDTO
      type: object
      properties:
        category:
          $ref: '#/components/schemas/CategoryDTO'
        categoryId:
          type: integer
          format: int64
        color:
          type: string
        creationTimestamp:
          type: string
          format: date-time
        creationUser:
          type: string
        description:
          type: string
        id:
          type: integer
          format: int64
        name:
          type: string
        price:
          type: number
          format: float
        updateTimestamp:
          type: string
          format: date-time
        updateUser:
          type: string
        version:
          type: integer
          format: int64
    OrderContent:
      title: OrderContent
      type: object
      properties:
        additions:
          type: array
          items:
            type: string
        categoryId:
          type: integer
          format: int64
        info:
          type: string
        itemId:
          type: string
        less:
          type: array
          items:
            type: string
        price:
          type: number
          format: double
        qty:
          type: integer
          format: int32
    PrinterCfgDTO:
      title: PrinterCfgDTO
      type: object
      properties:
        attrs:
          type: object
          additionalProperties:
            type: string
        creationTimestamp:
          type: string
          format: date-time
        creationUser:
          type: string
        description:
          type: string
        id:
          type: integer
          format: int64
        name:
          type: string
        printerName:
          type: string
        reportTemplate:
          type: string
        updateTimestamp:
          type: string
          format: date-time
        updateUser:
          type: string
        version:
          type: integer
          format: int64
    ResetPasswordRequest:
      title: ResetPasswordRequest
      required:
      - newPassword
      - oldPassword
      - username
      type: object
      properties:
        newPassword:
          maxLength: 40
          minLength: 6
          type: string
        oldPassword:
          type: string
        username:
          type: string
    Serializable:
      title: Serializable
      type: object
    SignupRequest:
      title: SignupRequest
      required:
      - email
      - password
      - username
      type: object
      properties:
        email:
          maxLength: 50
          minLength: 0
          type: string
        password:
          maxLength: 40
          minLength: 6
          type: string
        role:
          uniqueItems: true
          type: array
          items:
            type: string
        username:
          maxLength: 20
          minLength: 3
          type: string
